#!/bin/bash

# Ferramentas essenciais para manter um servidor Minecraft Bedrock sempre ativo.
# Este pacote fornece uma coleção de ferramentas e scripts necessários para garantir
# que um servidor Minecraft Bedrock esteja sempre ativo e funcionando de forma estável.
# Inclui suporte para reinicialização automática, backups regulares, e monitoramento
# de desempenho.
#
# Desenvolvido por Isac Gondim.
# Todos os direitos autorais reservados.
# LinkedIn: https://www.linkedin.com/in/isac-gondim-07a836227/

CONFIG_FILE="/etc/mineservertools/bedrock-server.conf"
LOG_TASK="/var/log/bedrock-backup.log"
DIR_BACKUP="/var/mine-backups/backup-server-bedrock/"

backup() {
    SERVER_DIR=$(grep '^server-dir=' "$CONFIG_FILE" | cut -d '=' -f2 | tr -d '"')

    if [ ! -d "$SERVER_DIR" ]; then
        echo "[$(date)] Diretório não encontrado: $SERVER_DIR" >> "$LOG_TASK"
        exit 1
    fi

    DATE_FILE=$(date +"%Y-%m-%d_%H-%M-%S")
    FILE_NAME="server-mine-bedrock-$DATE_FILE.tar.zst"
    TEMP_TAR="/tmp/server-mine-bedrock-temp.tar.zst"

    cd "$DIR_BACKUP" || { echo "[$(date)] Erro ao acessar o diretório de DIR_BACKUP." >> "$LOG_TASK"; exit 1; }

    if ls *.tar.zst 1> /dev/null 2>&1; then
        BACKUPS_FILE=$(ls -t *.tar.zst 2>/dev/null)
        if [ -n "$BACKUPS_FILE" ]; then
            echo "$BACKUPS_FILE" | head -n -5 | xargs -r rm -f
        fi
    fi

    echo "Iniciando backup..."

    tar --use-compress-program=zstd -cf "$TEMP_TAR" -C "$SERVER_DIR" .

    SIZE_TAR=$(du -b "$TEMP_TAR" | awk '{print $1}')

    pv -s "$SIZE_TAR" "$TEMP_TAR" > "$DIR_BACKUP/$FILE_NAME"

    if [ $? -eq 0 ]; then
         rm -r "$TEMP_TAR"
        echo "[$(date)] Backup concluído com sucesso: $FILE_NAME" >> "$LOG_TASK"
    else
        echo "[$(date)] Erro ao fazer o backup." >> "$LOG_TASK"
    fi
}

schedule_tasks() {
    echo "Agendando tarefas automáticas..."
    (crontab -l ; echo "0 3 * * * /usr/bin/bedrock-tools/tools/backup-server --backup") | crontab -
    echo "[$(date)] Tarefas agendadas." >> "$LOG_TASK"
}

view_backup() {
cd "$DIR_BACKUP" || { echo "[$(date)] Erro ao acessar os backups" >> "$LOG_TASK"; exit 1; }
find $ -type f -name "*.tar.zst" -exec stat --format="%W %s %i %n" {} + | sort -nr | awk '
BEGIN {
    # Define a cor verde clara para destaque
    LIGHT_GREEN="\033[1;32m"
    RESET_COLOR="\033[0m"
}
{
    size=$2
    if (size >= 1024*1024*1024) {
        size=size/(1024*1024*1024)
        size_str=sprintf("%.2f GB", size)
    } else if (size >= 1024*1024) {
        size=size/(1024*1024)
        size_str=sprintf("%.2f MB", size)
    } else {
        size=size/1024
        size_str=sprintf("%.2f KB", size)
    }
    # Extrai o nome do arquivo sem o caminho
    split($4, parts, "/")
    file_name=parts[length(parts)]
    
    # Adiciona [Mais Recente] aos dois arquivos mais recentes
    if (NR==1) {
        printf LIGHT_GREEN "ID: %-10s Tamanho: %-10s Nome: %-40s Data de Criação: %s [Mais Recente]\n" RESET_COLOR, $3, size_str, file_name, strftime("%Y-%m-%d %H:%M:%S", $1)
    } else if (NR==2) {
        printf LIGHT_GREEN "ID: %-10s Tamanho: %-10s Nome: %-40s Data de Criação: %s [Mais Recente]\n" RESET_COLOR, $3, size_str, file_name, strftime("%Y-%m-%d %H:%M:%S", $1)
    } else {
        printf "ID: %-10s Tamanho: %-10s Nome: %-40s Data de Criação: %s\n", $3, size_str, file_name, strftime("%Y-%m-%d %H:%M:%S", $1)
    }
}'
}

case "$1" in
    --backup)
        backup
        ;;
    --schedule)
        schedule_tasks
        ;;
    --view)
        view_backup
        ;;
    *)
        echo "Uso: $0 [--backup|--schedule|--view]"
        exit 1
        ;;
esac

exit 0